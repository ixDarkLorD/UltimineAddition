plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    if (project(":common").file("src/main/resources/${modid}.accesswidener").exists()) {
        accessWidenerPath = project(":common").loom.accessWidenerPath
        project.logger.info('Access Wideners are enabled for this project.')
    }

    forge {
        useForgeLoggerConfig = true

        if (project(":common").file("src/main/resources/${modid}.accesswidener").exists()) {
            convertAccessWideners = true
            extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        }

        if (project(":common").file("src/main/resources/${modid}.common.mixins.json").exists()) {
            mixinConfig "${modid}.common.mixins.json"
        }
        if (project.file("src/main/resources/${modid}.mixins.json").exists()) {
            mixinConfig "${modid}.mixins.json"
        }

        runs {
            client {
                client()
                setConfigName("Forge Client")
                ideConfigGenerated(true)
                runDir("run")
                vmArg "-Xms${runtime_min_ram}"
                vmArg "-Xmx${runtime_max_ram}"
                property 'mixin.debug.export', mixin_debug
                property 'fml.earlyprogresswindow', 'false'
                property 'forge.logging.markers', 'REGISTRIES'
                property 'forge.logging.console.level', 'debug'
                property 'terminal.ansi', 'true'
            }
            server {
                server()
                setConfigName("Forge Server")
                ideConfigGenerated(true)
                runDir("run")
                vmArg "-Xms${runtime_min_ram}"
                vmArg "-Xmx${runtime_max_ram}"
                property 'mixin.debug.export', mixin_debug
                property 'terminal.ansi', 'true'
            }
            data {
                data()
                setConfigName("Forge Data")
                ideConfigGenerated(true)
                runDir("run")
                vmArg "-Xms${runtime_min_ram}"
                vmArg "-Xmx${runtime_max_ram}"
                property 'mixin.debug.export', mixin_debug
                property 'terminal.ansi', 'true'
                programArgs "--all", "--mod", "${modid}"
                programArgs "--output", file("src/generated/resources").absolutePath
                programArgs "--existing", project(":common").file("src/main/resources").absolutePath
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${mc_version}-${forge_version}"
    modApi "dev.architectury:architectury-forge:${architectury_version}"
    modApi "net.ixdarklord.coolcat_lib:forge:${mc_version}-v${coolcatlib_version}-release"

    modImplementation "curse.maven:ftb-library-forge-404465:4720056"
    modImplementation "curse.maven:ftb-ultimine-forge-386134:5005006"

    modCompileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
//    modRuntimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"
    modRuntimeOnly "curse.maven:jei-238222:4712868"
    modCompileOnly "top.theillusivec4.curios:curios-forge:${curios_version}:api"
    modRuntimeOnly "top.theillusivec4.curios:curios-forge:${curios_version}"

    modRuntimeOnly "curse.maven:catalogue-459701:4766090"
//    modRuntimeOnly "curse.maven:configured-457570:4462837"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    from project(":common").file('src/main/resources/pack.mcmeta')
    from project(":common").file('src/main/resources/mod_logo.png')

    duplicatesStrategy DuplicatesStrategy.INCLUDE
    var replaceProperties = [
            modId:                    modid,
            modName:                  mod_name,
            modVersion:               mod_version,
            modDescription:           mod_description,
            modGroup:                 project.group,
            modPageUrl:               mod_page_url,
            modUpdateUrl:             mod_update_url,
            modIssueUrl:              mod_issue_url,
            modAuthor:                mod_author,
            modLicense:               mod_license,
            minFMLVersion:            min_forge_version.replaceAll("\\..*", ""),
            minForgeVersion:          min_forge_version,
            minMinecraftVersion:      min_mc_version,
            nextMinecraftVersion:     rootProject.getNextVersion("${min_mc_version}"),
            packFormat:               pack_format,
            modForgeDisplayTest:      mod_forge_display_test,
            archVersion:              architectury_version,
            ccLibVersion:             coolcatlib_version,
            ftbUltimineVersion:       ftbultimine_version,
            jeiVersion:               jei_version,
            curiosVersion:            curios_version,

    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.convention("dev-shadow")
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar

    archiveClassifier.convention(null)
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.convention("dev")
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}