architectury {
    common(enabled_platforms.split(","))
}

loom {
    if (file("src/main/resources/${modid}.accesswidener").exists()) {
        accessWidenerPath = file("src/main/resources/${modid}.accesswidener")
        logger.info('Access Widener are enabled for this project.')
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_version}"
    modApi "dev.architectury:architectury:${architectury_version}"
    modApi "net.ixdarklord.coolcat_lib:common:${mc_version}-v${coolcatlib_version}-release"

    implementation 'com.electronwill.night-config:core:3.6.6'
    implementation 'com.electronwill.night-config:toml:3.6.6'
    modCompileOnly "curse.maven:forge-config-api-port-fabric-547434:${forge_config_api_version_id}"

    modCompileOnly "curse.maven:ftb-library-forge-404465:4720056"
    modCompileOnly "curse.maven:ftb-ultimine-forge-386134:5005006"

    modApi "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    inputs.property "modId", 			        "${modid}"
    inputs.property "modDescription", 			"${mod_description}"
    inputs.property "packFormat", 				"${pack_format}"
    inputs.property "mixinPackagePath", 		"${project.group}.common.mixin"

    filesMatching ('architectury.common.json') {
        expand (
                'modId':       "${modid}"
        )
    }

    filesMatching ("${modid}.common.mixins.json") {
        expand (
                'modId':                	"${modid}",
                'mixinPackagePath':         "${project.group}.common.mixin"
        )
    }

    filesMatching ('pack.mcmeta') {
        expand (
                'modDescription':       "${mod_description}",
                "packFormat":           "${pack_format}"
        )
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            groupId rootProject.group
            artifactId rootProject.archivesBaseName
            version rootProject.version
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
