apply from: './gradle/tasks.gradle'

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    version = "${mc_version}-v${mod_version}-${project_release_type}"
    group = "${mod_maven_group}.${modid}"

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven {
            name = 'Parchment'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            name = 'Curse Maven'
            url = 'https://cursemaven.com'
        }
        flatDir {
            dirs 'libs'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        options.encoding = 'UTF-8'
        options.release = 17
    }

    tasks.withType(Jar).configureEach {
        //from rootProject.file("LICENSE")
        //from rootProject.file("CHANGELOG.md")
        manifest {
            attributes([
                    "Specification-Title"               : mod_name,
                    'Specification-Version'             : mod_version,
                    "Specification-Vendor"              : mod_author,
                    'Implementation-Title'              : mod_name,
                    'Implementation-Version'            : mod_version,
                    'Implementation-Vendor'             : mod_author,
                    'Implementation-Timestamp'          : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Implementation-Timestamp-Milli'    : System.currentTimeMillis(),
                    'Implementation-URL'                : mod_source_url,
                    'Built-On-Java'                     : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'                : mc_version
            ])
        }
        group 'jar'
    }

    tasks.withType(GenerateModuleMetadata) {
        // Disables Gradle's custom module metadata from being published to maven. The
        // metadata includes mapped dependencies which are not reasonably consumable by
        // other mod developers.
        enabled = false
    }
}
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

import java.util.regex.Pattern

task incrementBuildNumber {
    onlyIf { project.hasProperty('unique_build_number') }
    doLast {
        def propertiesName = 'gradle.properties'
        // build number is stored in global gradle.properties
        def propertiesFile = new File(project.gradle.gradleUserHomeDir, propertiesName)
        if (!propertiesFile.canRead()) { throw new FileNotFoundException("Could not read file ".concat(propertiesName)) }
        def buildNumberMatcher = Pattern.compile("unique_build_number=(\\d+)").matcher(propertiesFile.getText())
        buildNumberMatcher.find()
        def versionCode = Integer.parseInt(buildNumberMatcher.group(1))
        def propertiesContent = buildNumberMatcher.replaceAll("unique_build_number=" + ++versionCode)
        propertiesFile.write(propertiesContent)
    }
}

def static getNextVersion(String ver) {
    def versionMatcher = Pattern.compile("(\\d+\\.\\d+)").matcher(ver)
    versionMatcher.find()
    def currentVersion = versionMatcher.group(1)
    return currentVersion.substring(0, currentVersion.indexOf(".") + 1).concat(String.valueOf(Integer.parseInt(currentVersion.substring(currentVersion.indexOf(".") + 1, currentVersion.size())) + 1))
}

def static UppercaseString(String str) {
    return str.toUpperCase()
}
