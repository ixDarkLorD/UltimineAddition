plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
    id 'net.darkhax.curseforgegradle' version '1.0.11'
    id 'com.modrinth.minotaur' version '2.8.4'
}

apply from: './gradle/tasks.gradle'

architectury {
    minecraft = mc_version
}


import com.modrinth.minotaur.dependencies.DependencyType
import com.modrinth.minotaur.dependencies.ModDependency
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import net.darkhax.curseforgegradle.TaskPublishCurseForge

import java.util.regex.Pattern

tasks.register('incrementBuildNumber') {
    onlyIf { project.hasProperty('copy_build_jar') && project.hasProperty('unique_build_number') }
    doLast {
        def propertiesName = 'gradle.properties'
        // build number is stored in global gradle.properties
        def propertiesFile = new File(project.gradle.gradleUserHomeDir, propertiesName)
        if (!propertiesFile.canRead()) {
            throw new FileNotFoundException("Could not read file ".concat(propertiesName))
        }
        def properties = new Properties()
        properties.load(file(propertiesFile).newDataInputStream())
        if (Boolean.parseBoolean(properties['separate_unique_build_numbers'])) {
            propertiesFile = new File(getRootDir(), propertiesName)
        }
        def buildNumberMatcher = Pattern.compile("unique_build_number=(\\d+)").matcher(propertiesFile.getText())
        buildNumberMatcher.find()
        def versionCode = Integer.parseInt(buildNumberMatcher.group(1))
        def propertiesContent = buildNumberMatcher.replaceAll("unique_build_number=" + ++versionCode)
        propertiesFile.write(propertiesContent)
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "net.darkhax.curseforgegradle"
    apply plugin: "com.modrinth.minotaur"

    loom {
        mixin {
            if (project.file("src/main/resources/${modid}.mixins.json").exists() || project(":common").file("src/main/resources/${modid}.common.mixins.json").exists()) {
                defaultRefmapName = "${modid}.${project.name}.refmap.json"
            }
        }

        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${mc_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${mc_version}:${parchment_mappings_version}@zip")
        }
    }

    tasks.register('curseforge', TaskPublishCurseForge) {
        if (!enabled_platforms.split(",").contains(project.name)) return
        if (!rootProject.file('CHANGELOG.md').canRead()) {
            throw new FileNotFoundException("Could not read changelog file")
        }

        disableVersionDetection()
        apiToken = curseforge_api_token

        def mainFile = upload(project_curse_id, remapJar)
        mainFile.changelog = rootProject.file('CHANGELOG.md')
        mainFile.changelogType = 'markdown'
        mainFile.displayName = "[${rootProject.UppercaseFirstChar(project.name)}] ${mc_version} | v${mod_version} " + rootProject.UppercaseString("${project_release_type}")
        mainFile.releaseType = project_release_type

        def result = extractDependencies(project.name == "forge" ? forge_publish_dependencies : fabric_publish_dependencies);
        result[0].each { element ->
            if (!element.isEmpty()) {
                mainFile.addRequirement(element)
            }
        }
        result[1].each { element ->
            if (!element.isEmpty()) {
                mainFile.addOptional(element)
            }
        }

        mainFile.addGameVersion(rootProject.UppercaseFirstChar(project.name))
        project_game_versions.split(",").each {
            mainFile.addGameVersion(it.trim())
        }
    }

    modrinth {
        if (!enabled_platforms.split(",").contains(project.name)) return
        if (!rootProject.file('CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }

        token = modrinth_api_token
        projectId = project_modrinth_id
        versionNumber = project.version
        versionName = "[${rootProject.UppercaseFirstChar(project.name)}] ${mc_version} | v${mod_version} " + rootProject.UppercaseString("${project_release_type}")
        changelog = rootProject.file('CHANGELOG.md').text
        versionType = project_release_type
        uploadFile = remapJar
        loaders.add project.name

        def result = extractDependencies(project.name == "forge" ? forge_publish_dependencies : fabric_publish_dependencies);
        // Create a new `ModDependency` or `VersionDependency` with two strings - the ID and the scope
        result[0].each { element ->
            if (!element.isEmpty()) {
                dependencies.add(new ModDependency(element, DependencyType.REQUIRED))
            }
        }
        result[1].each { element ->
            if (!element.isEmpty()) {
                dependencies.add(new ModDependency(element, DependencyType.OPTIONAL))
            }
        }
        project_game_versions.split(",").each {
            gameVersions.add(it.trim())
        }
    }

    tasks.register('copyJarToDir', Copy) {
        if (!enabled_platforms.split(",").contains(project.name)) return
        onlyIf { project.hasProperty('build_jar_output_dir') && project.hasProperty('unique_build_number') }
        if (project.findProperty('copy_build_jar').toBoolean()) {
            // shortcut for jar.outputs.files
            from remapJar
            into project.findProperty('build_jar_output_dir')
            // add build number to be able to distinguish jars when testing thorough official launcher
            // build number is stored in global gradle.properties
            rename { fileName -> fileName.replace("v${mod_version}", "v${mod_version}-build.${unique_build_number}") }
        }
    }

    tasks.register('refreshUpdateJson') {
        onlyIf { project.name == "forge" && project.hasProperty('mod_resources') }
        doLast {
            def updateFile = file(project.findProperty('mod_resources').concat(File.separator).concat('updates').concat(File.separator).concat("${modid}").concat('.json'))
            def updateJson
            if (updateFile.exists() && updateFile.canRead() && updateFile.length() != 0) {
                updateJson = new JsonSlurper().parseText(updateFile.text)
                "${project_game_versions}".replaceAll(" ", "").split(",").each { version ->
                    updateJson['promos']["${version}-latest"] = "${mod_version}"
                    // alpha and beta releases will contain 'a' or 'b' char respectively, don't update recommended for those
                    if ("${mod_version}".matches("[^a-zA-Z]+")) {
                        updateJson['promos']["${version}-recommended"] = "${mod_version}"
                    }
                }
            } else {
                def builder = new JsonBuilder()
                updateJson = builder {
                    homepage "${mod_page_url}"
                    promos {
                        "${project_game_versions}".replaceAll(" ", "").split(",").each { version ->
                            "${version}-latest" "${mod_version}"
                            // alpha and beta releases will contain 'a' or 'b' char respectively, don't update recommended for those
                            if ("${mod_version}".matches("[^a-zA-Z]+")) {
                                "${version}-recommended" "${mod_version}"
                            }
                        }
                    }
                }
            }
            def output = new JsonOutput()
            updateFile.write(output.prettyPrint(output.toJson(updateJson)))
        }
    }

    if (enabled_platforms.split(",").contains(project.name)) {
        build.finalizedBy project.tasks.copyJarToDir, rootProject.tasks.incrementBuildNumber
        [project.tasks.modrinth, project.tasks.curseforge].each {it.finalizedBy project.tasks.refreshUpdateJson}
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = "${modid}-${project.name}"
    version = "${mc_version}-v${mod_version}-${project_release_type}"
    group = "${mod_maven_group}.${modid}"

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "Sponge / Mixin"
            url = "https://repo.spongepowered.org/repository/maven-public/"
        }
        maven {
            // location of the maven that hosts JEI files before January 2023
            name = "Progwml6's maven"
            url = "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            // location of the maven that hosts JEI files since January 2023
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        maven {
            name = "Terraformers"
            url = "https://maven.terraformersmc.com/"
        }
        maven {
            name = "Curse Maven"
            url = "https://cursemaven.com"
        }
        maven {
            name = "Modrinth Maven"
            url = "https://api.modrinth.com/maven"
        }
    }

    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        options.encoding = 'UTF-8'
        options.release = 17
    }

    tasks.withType(Jar).configureEach {
        //from rootProject.file("LICENSE")
        //from rootProject.file("CHANGELOG.md")
        manifest {
            attributes([
                    "Specification-Title"               : mod_name,
                    'Specification-Version'             : mod_version,
                    "Specification-Vendor"              : mod_author,
                    'Implementation-Title'              : mod_name,
                    'Implementation-Version'            : mod_version,
                    'Implementation-Vendor'             : mod_author,
                    'Implementation-Timestamp'          : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Implementation-Timestamp-Milli'    : System.currentTimeMillis(),
                    'Implementation-URL'                : mod_source_url,
                    'Built-On-Java'                     : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'                : mc_version
            ])
        }
        group 'jar'
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        // Disables Gradle's custom module metadata from being published to maven. The
        // metadata includes mapped dependencies which are not reasonably consumable by
        // other mod developers.
        enabled = false
    }

    java {
        withSourcesJar()
        withJavadocJar()
        javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

def static getNextVersion(String ver) {
    def versionMatcher = Pattern.compile("(\\d+\\.\\d+)").matcher(ver)
    versionMatcher.find()
    def currentVersion = versionMatcher.group(1)
    return currentVersion.substring(0, currentVersion.indexOf(".") + 1).concat(String.valueOf(Integer.parseInt(currentVersion.substring(currentVersion.indexOf(".") + 1, currentVersion.size())) + 1))
}

def static UppercaseString(String str) {
    return str.toUpperCase()
}

def static UppercaseFirstChar(String str) {
    return str.substring(0, 1).toUpperCase() + str.substring(1)
}

def static extractDependencies(String input) {
    def requirementMatch = input =~ /requirement\[(.*?)\]/
    def optionalMatch = input =~ /optional\[(.*?)\]/

    def requirement = requirementMatch ? requirementMatch[0][1] : ""
    def optional = optionalMatch ? optionalMatch[0][1] : ""

    def requirementElements = requirement.split(',').collect { it.trim() }
    def optionalElements = optional.split(',').collect { it.trim() }

    // Convert elements to strings explicitly
    requirementElements = requirementElements.collect { it.toString() }
    optionalElements = optionalElements.collect { it.toString() }

    return [requirementElements, optionalElements]
}