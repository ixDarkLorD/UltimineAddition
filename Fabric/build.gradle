plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'idea'
    id 'net.darkhax.curseforgegradle' version '1.0.11'
    id 'com.modrinth.minotaur' version '2.+'
}

java.withSourcesJar()
java.withJavadocJar()
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

archivesBaseName = "${modid}-fabric"

repositories {
    maven {
        name = 'Terraformers'
        url = "https://maven.terraformersmc.com/"
    }
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${mc_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${mc_version}:${parchment_mappings_version}@zip")
    }

    // Loader
    modImplementation "net.fabricmc:fabric-loader:${fabric_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}+${mc_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":Common")

    // Config Dependencies
    implementation 'com.electronwill.night-config:core:3.6.6'
    implementation 'com.electronwill.night-config:toml:3.6.6'
    modImplementation "curse.maven:forge-config-api-port-fabric-547434:3960064" //ForgeConfigAPIPort-v4.2.6

    // Mods
    modImplementation "curse.maven:ftb-ultimine-fabric-448231:3993548"
    modRuntimeOnly "com.terraformersmc:modmenu:4.0.6"
    modRuntimeOnly "curse.maven:catalogue-fabric-667377:4171029"
    modRuntimeOnly "curse.maven:ftb-library-fabric-438495:4123391"
    modRuntimeOnly "curse.maven:architectury-api-419699:4147351"
}

def data_output = 'src/main/generated'

loom {
    mixin {
        defaultRefmapName = "${modid}.refmap.json"
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
            vmArg "-Dmixin.debug.export=${mixin_debug}"
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
            vmArg "-Dmixin.debug.export=${mixin_debug}"
        }
        datagen {
            server()
            setConfigName("Fabric Data")
            ideConfigGenerated(true)
            runDir("run/datagen")
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file(data_output)}"
        }
    }
}


processResources {
    from project(":Common").sourceSets.main.resources
    exclude("**/quilt.mod.json")

    duplicatesStrategy DuplicatesStrategy.INCLUDE
    inputs.property "modId", 					"${modid}"
    inputs.property "modName", 					"${mod_name}"
    inputs.property "modVersion", 				"${mod_version}"
    inputs.property "modDescription", 			"${mod_description}"
    inputs.property "modGroup", 				project.group
    inputs.property "modPageUrl", 				"${mod_page_url}"
    inputs.property "modIssueUrl", 				"${mod_issue_url}"
    inputs.property "modSourceUrl", 		    "${mod_source_url}"
    inputs.property "modAuthor", 				"${mod_author}"
    inputs.property "modLicense", 				"${mod_license}"
    inputs.property "minFabricVersion", 		"${min_fabric_version}"
    inputs.property "minFabricApiVersion", 		"${min_fabric_api_version}"
    inputs.property "minMinecraftVersion", 		"${min_mc_version}"
    inputs.property "nextMinecraftVersion", 	rootProject.getNextVersion("${min_mc_version}")
    inputs.property "packFormat", 				"${pack_format}"
    inputs.property "mainEntryPoint", 			"${project.group}.core.FabricSetup"
    inputs.property "clientEntryPoint", 		"${project.group}.core.FabricClientSetup"
    inputs.property "datagenEntryPoint", 		"${project.group}.data.DataGeneration"
    inputs.property "modFabricEnvironment", 	"${mod_fabric_environment}"

    filesMatching ('fabric.mod.json') {
        expand (
                'modId':                	"${modid}",
                'modName':              	"${mod_name}",
                'modVersion':           	"${mod_version}",
                'modDescription':       	"${mod_description}",
                'modGroup':             	project.group,
                'modPageUrl':           	"${mod_page_url}",
                'modIssueUrl':          	"${mod_issue_url}",
                'modSourceUrl':          	"${mod_source_url}",
                'modAuthor':            	"${mod_author}",
                'modLicense':            	"${mod_license}",
                'minFabricVersion':     	"${min_fabric_version}",
                'minFabricApiVersion':  	"${min_fabric_api_version}",
                'minMinecraftVersion':  	"${min_mc_version}",
                "nextMinecraftVersion": 	rootProject.getNextVersion("${min_mc_version}"),
                "mainEntryPoint": 			"${project.group}.core.FabricSetup",
                "clientEntryPoint": 		"${project.group}.core.FabricClientSetup",
                "datagenEntryPoint": 		"${project.group}.data.DataGeneration",
                "modFabricEnvironment":		"${mod_fabric_environment}"
        )
    }

    filesMatching ('pack.mcmeta') {
        expand (
                'modDescription':       "${mod_description}",
                "packFormat":           "${pack_format}"
        )
    }
}

sourceSets { main { resources { srcDirs += data_output }}}

compileJava {
    source project(":Common").sourceSets.main.allSource
}

sourcesJar {
    from project(":Common").sourceSets.main.allJava
}

javadoc {
    source project(":Common").sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge

task curseforge(type: TaskPublishCurseForge) {
    if (!file('../classified.properties').canRead()) { throw new FileNotFoundException("Could not read properties file") }
    if (!file('../CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }

    disableVersionDetection()
    def AdminProperties = new Properties()
    AdminProperties.load(file('../classified.properties').newDataInputStream())
    apiToken = AdminProperties['curseforge_api_token']

    def mainFile = upload(project_curse_id, remapJar)
    mainFile.changelog = file('../CHANGELOG.md')
    mainFile.changelogType = 'markdown'
    mainFile.displayName = "[Fabric] ${mc_version} | v${mod_version} " + rootProject.UppercaseString("${project_release_type}")
    mainFile.releaseType = project_release_type
    mainFile.addRequirement('forge-config-api-port-fabric')
    mainFile.addRequirement('ftb-ultimine-fabric')
    mainFile.addGameVersion("Fabric")
    project_game_versions.split(",").each {
        mainFile.addGameVersion(it.trim())
    }
}

modrinth {
    if (!file('../classified.properties').canRead()) { throw new FileNotFoundException("Could not read properties file") }
    if (!file('../CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }

    def AdminProperties = new Properties()
    AdminProperties.load(file('../classified.properties').newDataInputStream())
    token = AdminProperties['modrinth_api_token']

    projectId = project_modrinth_id
    versionNumber = project.version
    versionName = "[Fabric] ${mc_version} | v${mod_version} " + rootProject.UppercaseString("${project_release_type}")
    changelog = file('../CHANGELOG.md').text
    versionType = project_release_type
    uploadFile = remapJar
    loaders.add 'fabric'
    dependencies {
        required.project "forge-config-api-port"
        required.project "ftb-ultimine-fabric"
    }
    project_game_versions.split(",").each {
        gameVersions.add(it.trim())
    }
}

task copyJarToDir(type: Copy) {
    onlyIf { project.hasProperty('build_jar_output_dir') && project.hasProperty('unique_build_number') }
    if (project.findProperty('copy_build_jar').toBoolean()) {
        from remapJar
        into project.findProperty('build_jar_output_dir')
        // add build number to be able to distinguish jars when testing thorough official launcher
        // build number is stored in global gradle.properties
        rename { fileName -> fileName.replace("v${mod_version}", "v${mod_version}-build.${unique_build_number}") }
    }
}

build.finalizedBy project.tasks.copyJarToDir, rootProject.tasks.incrementBuildNumber